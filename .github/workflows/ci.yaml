name: CI

on:
  push:
    branches:
      - 'master'
    tags-ignore:
      - '**'
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

jobs:
  build-publish-php:
    name: Build image for CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/jagfx/pyxis-php
          tags: |
            # Tag par défaut pour le cache
            type=raw,value=ci
          flavor: |
            latest=false

      - name: Build PHP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/php/Dockerfile
          push: true
          target: dev
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/jagfx/pyxis-php:ci
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  setup_install_dependencies:
    name: Setup and install dependencies
    runs-on: ubuntu-latest
    needs: [ build-publish-php ]
    container:
      image: ghcr.io/jagfx/pyxis-php:ci
      options: --user root
      env:
        APP_ENV: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Node.js
        run: apk add --update npm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install Composer dependencies
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
          composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader
          else
          echo "✅ Composer dependencies loaded from cache"
          fi

      - name: Install Node.js dependencies
        run: |
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
            npm ci --no-progress --silent
          else
            echo "✅ Node.js dependencies loaded from cache"
          fi

      - name: Cache build workspace
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/
            .phpunit.cache/
            var/cache/
          key: workspace-${{ github.sha }}-${{ github.run_attempt }}

  backend_code_quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    needs: [ setup_install_dependencies ]
    container:
      image: ghcr.io/jagfx/pyxis-php:ci
      options: --user root
      env:
        APP_ENV: dev
        RECTOR_MAX_PROCESS: 1
    strategy:
      fail-fast: false
      matrix:
        tool: [ cs-fixer, phpstan, rector ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/
            .phpunit.cache/
            var/cache/
          key: workspace-${{ github.sha }}-${{ github.run_attempt }}

      - name: Run ${{ matrix.tool }}
        run: |
          case "${{ matrix.tool }}" in
            "cs-fixer")
              php-cs-fixer fix --using-cache=no --diff --dry-run -n -q
              ;;
            "phpstan")
              php vendor/bin/phpstan analyse -n src --no-progress
              ;;
            "rector")
              php bin/console cache:warmup --env=dev
              php vendor/bin/rector process src -n --dry-run --no-progress-bar --no-diffs
              ;;
          esac

  frontend_quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    needs: [ setup_install_dependencies ]
    container:
      image: ghcr.io/jagfx/pyxis-php:ci
      options: --user root
      env:
        APP_ENV: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Node.js
        run: apk add --update npm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/
            .phpunit.cache/
            var/cache/
          key: workspace-${{ github.sha }}-${{ github.run_attempt }}

      # TODO: Standby. Add later a linter for JS + CSS
#      - name: Run Stylelint
#        run: npm run lint -- --max-warnings=0
          
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    needs: [ setup_install_dependencies ]
    container:
      image: ghcr.io/jagfx/pyxis-php:ci
      options: --user root
      env:
        APP_ENV: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/
            .phpunit.cache/
            var/cache/
          key: workspace-${{ github.sha }}-${{ github.run_attempt }}

      - name: Run unit test
        run: bin/phpunit tests/Unit \
          --no-coverage \
          --no-logging \
          --fail-on-warning \
          --testdox

  integration_test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: [ setup_install_dependencies ]
    container:
      image: ghcr.io/jagfx/pyxis-php:ci
      options: --user root
      env:
        APP_ENV: test
        DB_HOST: mysql
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: noPassword
          MYSQL_DATABASE: bugr_test
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/
            .phpunit.cache/
            var/cache/
          key: workspace-${{ github.sha }}-${{ github.run_attempt }}

      - name: Wait for MySQL
        run: |
          echo "⏳ Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h mysql -u root -p"noPassword" --silent; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "Attempt $i/30: MySQL not ready, waiting..."
            sleep 2
          done

      - name: Apply database schema
        run: php bin/console d:m:m -n --env=test --no-interaction

      - name: Apply fixtures
        run: php bin/console h:f:l -n --purge-with-truncate --env=test --no-interaction

      - name: Install Node.js
        run: apk add --update npm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: npm ci --no-progress --silent

      - name: Build assets
        run: npm run build

      - name: Run integration test
        run: bin/phpunit tests/Integration \
          --no-coverage \
          --no-logging \
          --fail-on-warning